-- | This file is AUTOGENERATED by godot-haskell-project-generator. DO NOT EDIT

{-# LANGUAGE FlexibleContexts, FunctionalDependencies, MultiParamTypeClasses,
  UndecidableInstances, OverloadedStrings, TemplateHaskell, TypeApplications,
  TypeFamilies, TupleSections, DataKinds, TypeOperators, FlexibleInstances, RankNTypes,
  AllowAmbiguousTypes, ScopedTypeVariables, DerivingStrategies,
  GeneralizedNewtypeDeriving, LambdaCase #-}

module Project.Scenes.World where
import Prelude
import Project.Support
import Godot
import GHC.TypeLits

import Godot.Core.CollisionShape()
import Godot.Core.DirectionalLight()
import Godot.Core.PackedScene()
import Godot.Core.MeshInstance()
import Godot.Core.StaticBody()
import Godot.Core.Spatial()

instance SceneResourcePath "World" where
  sceneResourcePath = "res://World.tscn"


instance SceneRoot "World" where
  type SceneRootNode "World" = "World"


instance SceneNode        "World" "MeshInstance7/StaticBody/CollisionShape" where
  type SceneNodeType      "World" "MeshInstance7/StaticBody/CollisionShape" = CollisionShape
  type SceneNodeName      "World" "MeshInstance7/StaticBody/CollisionShape" = "CollisionShape"
  type SceneNodeIsHaskell "World" "MeshInstance7/StaticBody/CollisionShape" = 'Nothing


instance SceneNode        "World" "DirectionalLight" where
  type SceneNodeType      "World" "DirectionalLight" = DirectionalLight
  type SceneNodeName      "World" "DirectionalLight" = "DirectionalLight"
  type SceneNodeIsHaskell "World" "DirectionalLight" = 'Nothing


instance SceneNode        "World" "GUI" where
  type SceneNodeType      "World" "GUI" = PackedScene' "GUI"
  type SceneNodeName      "World" "GUI" = "GUI"
  type SceneNodeIsHaskell "World" "GUI" = 'Nothing


instance SceneNode        "World" "MeshInstance" where
  type SceneNodeType      "World" "MeshInstance" = MeshInstance
  type SceneNodeName      "World" "MeshInstance" = "MeshInstance"
  type SceneNodeIsHaskell "World" "MeshInstance" = 'Nothing


instance SceneNode        "World" "MeshInstance2" where
  type SceneNodeType      "World" "MeshInstance2" = MeshInstance
  type SceneNodeName      "World" "MeshInstance2" = "MeshInstance2"
  type SceneNodeIsHaskell "World" "MeshInstance2" = 'Nothing


instance SceneNode        "World" "MeshInstance3" where
  type SceneNodeType      "World" "MeshInstance3" = MeshInstance
  type SceneNodeName      "World" "MeshInstance3" = "MeshInstance3"
  type SceneNodeIsHaskell "World" "MeshInstance3" = 'Nothing


instance SceneNode        "World" "MeshInstance4" where
  type SceneNodeType      "World" "MeshInstance4" = MeshInstance
  type SceneNodeName      "World" "MeshInstance4" = "MeshInstance4"
  type SceneNodeIsHaskell "World" "MeshInstance4" = 'Nothing


instance SceneNode        "World" "MeshInstance5" where
  type SceneNodeType      "World" "MeshInstance5" = MeshInstance
  type SceneNodeName      "World" "MeshInstance5" = "MeshInstance5"
  type SceneNodeIsHaskell "World" "MeshInstance5" = 'Nothing


instance SceneNode        "World" "MeshInstance6" where
  type SceneNodeType      "World" "MeshInstance6" = MeshInstance
  type SceneNodeName      "World" "MeshInstance6" = "MeshInstance6"
  type SceneNodeIsHaskell "World" "MeshInstance6" = 'Nothing


instance SceneNode        "World" "MeshInstance7" where
  type SceneNodeType      "World" "MeshInstance7" = MeshInstance
  type SceneNodeName      "World" "MeshInstance7" = "MeshInstance7"
  type SceneNodeIsHaskell "World" "MeshInstance7" = 'Nothing


instance SceneNode        "World" "MeshInstance8" where
  type SceneNodeType      "World" "MeshInstance8" = MeshInstance
  type SceneNodeName      "World" "MeshInstance8" = "MeshInstance8"
  type SceneNodeIsHaskell "World" "MeshInstance8" = 'Nothing


instance SceneNode        "World" "Player" where
  type SceneNodeType      "World" "Player" = PackedScene' "Player"
  type SceneNodeName      "World" "Player" = "Player"
  type SceneNodeIsHaskell "World" "Player" = 'Just '("Player", "Player")


instance SceneNode        "World" "MeshInstance7/StaticBody" where
  type SceneNodeType      "World" "MeshInstance7/StaticBody" = StaticBody
  type SceneNodeName      "World" "MeshInstance7/StaticBody" = "StaticBody"
  type SceneNodeIsHaskell "World" "MeshInstance7/StaticBody" = 'Nothing


instance SceneNode        "World" "World" where
  type SceneNodeType      "World" "World" = Spatial
  type SceneNodeName      "World" "World" = "World"
  type SceneNodeIsHaskell "World" "World" = 'Nothing

